using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web.Http;
using Vidly.Dtos;
using Vidly.Models;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context = new ApplicationDbContext();

        //GET /api/customers
        public IHttpActionResult  GetCustomers()
        {
            /*var customers = _context.Customers.ToList();
            var customersDto = new List<CustomerDto>();
            foreach (var item in customers)
            {
                customersDto.Add(Mapper.Map<Customer, CustomerDto>(item));
                 return customersDto;

            This can be written like this : 
            }*/

            //Mapper.Map delegates a reference to this method Map
            var customersDto = _context.Customers.ToList().Select(Mapper.Map<Customer, CustomerDto>);
            return Ok(customersDto);

        }

        //GET /api/customer/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customer == null) return NotFound();

            //return Mapper.Map<Customer, CustomerDto>(customer);
            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }

        //POST /api/customers
        [HttpPost]
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid) return BadRequest();

            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);

            _context.Customers.Add(customer);
            _context.SaveChanges();
            //customer object has now an id that is generated by the DB
            //so we add it to our dto an return it to the client
            customerDto.Id = customer.Id;
            return Created(new Uri(Request.RequestUri + "/" + customer.Id), customerDto);
        }

        //PUT /api/customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid) return BadRequest();

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerInDb == null) return NotFound();

            Mapper.Map(customerDto, customerInDb);
            /*job is done by mapper.map
            customerInDb.Name = customerDto.Name;
            customerInDb.Bitrhdate = customerDto.Bitrhdate;
            customerInDb.MembershipTypeId = customerDto.MembershipTypeId;
            customerInDb.IsSubscribedToNewsLetter = customerDto.IsSubscribedToNewsLetter;
            */
            _context.SaveChanges();
            return Ok();
        }

        //DELETE /api/customers/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            if (!ModelState.IsValid) return BadRequest();

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);
            if (customerInDb == null) return NotFound();

            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            return Ok();
        }
    }
}
